name: Openwrt-AutoBuild


on:
  workflow_dispatch:
    inputs:
      ssh:
        description: '编译OpenWrt固件-SSH远程：改为“ssh”打开SSH连接'
        required: false
        default: 'ssh-actions'


# 定时触发编译(1,2,5,6,8,10,12,15,16,18,20,22,25,26,28,30早3点)
  schedule:
    - cron: 0 17 * * *

# 点赞☆Star触发编译
#  watch:
#    types: [started]

env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on:  ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [lienol-x64,lean-x64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
       
    - name: Set Date
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        date=$(date +%Y%m%d)
        echo "DATE=$date" >> $GITHUB_ENV
                 
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
    - name: Load Settings.ini
      run: |    
        source "${GITHUB_WORKSPACE}/user/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_TARGETS_DIR=${UPLOAD_TARGETS_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_ARTIFACTS=${UPLOAD_TO_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_TO_REALEASE=${UPLOAD_TO_REALEASE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_COWTRANSFER=${UPLOAD_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "WECHAT_NOTIFICATION=${WECHAT_NOTIFICATION}" >> $GITHUB_ENV
        
        
    - name: Clone source code
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        
    - name: Apply Patches
      run: | 
        echo "Apply patches"
        if [ -n "$(ls -A "user/common/patches" 2>/dev/null)" ]; then
        (
          find "user/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi
        if [ -n "$(ls -A "user/${{matrix.target}}/patches" 2>/dev/null)" ]; then
        (
          find "user/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi         
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a
      
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |        
         echo "Apply files..."
         if [ -n "$(ls -A "user/common/files" 2>/dev/null)" ]; then
         cp -r -f user/common/files/* openwrt/package/base-files/files/
         fi
         if [ -n "$(ls -A "user/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -r -f user/${{matrix.target}}/files/* openwrt/package/base-files/files/
         fi
        
         echo "Apply custom.sh"
         if [ -f "user/common/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/common/custom.sh"
         )
         fi       
         if [ -f "user/${{matrix.target}}/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash ../user/${{matrix.target}}/custom.sh ${{matrix.target}}
         )
         fi
         
    - name: Download package
      id: package
      run: |
        cd openwrt
        mv ../user/${{matrix.target}}/config.diff .config
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
    - name: Check space usage
      if: (!cancelled())
      run: df -hT
      
    - name:  Pack packages_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/packages/
        tar -cvf  Openwrt-${{matrix.target}}-packages.tar ./
        mv *.tar ..
        
    - name:  Pack targets_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/
        tar -cvf  Openwrt-${{matrix.target}}-targets.tar ./
        mv *.tar ..
        
    - name: Assemble Firmware
      run: |
          rm -rf ./Firmware/
          mkdir -p ./Firmware/
          #find openwrt/bin/targets/ -name "*bin*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*img*" | xargs -i mv -f {} ./Firmware/
  
    - name: Upload Packages to release
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.SUPER_TOKEN }}
        file: openwrt/bin/Openwrt-${{matrix.target}}-packages.tar
        asset_name: Openwrt-${{matrix.target}}-packages-${{ env.DATE }}.tar
        tag: Openwrt-X64-${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: Upload Targets to release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.SUPER_TOKEN }}
        file: openwrt/bin/Openwrt-${{matrix.target}}-targets.tar
        asset_name: Openwrt-${{matrix.target}}-targets-${{ env.DATE }}.tar
        tag: Openwrt-X64-${{ env.DATE }}
        overwrite: true
        file_glob: true

        
    - name: Upload Packages to CowTransfer
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
         ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/${{matrix.target}}_packages.tar
        
    - name: Upload Targetss to CowTransfer
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&　 steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
         ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/${{matrix.target}}_targets.tar
        
    - name: Upload packages directory
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled()　&& steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-packages-${{matrix.target}}-${{ env.DATE }}
        path: openwrt/bin/packages
        
    - name: Upload targets directory
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-targets-${{matrix.target}}-${{ env.DATE }}
        path: openwrt/bin/targets
        
    - name: Upload Firmware
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-firmware-${{matrix.target}}-${{ env.DATE }}
        path: ./Firmware/
               

    - name: WeChat notification
      if: env.WECHAT_NOTIFICATION == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: curl https://sctapi.ftqq.com/${{ secrets.SCKEY }}.send?text=${{matrix.target}}固件已编译完成
